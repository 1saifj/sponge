definitions:
  handlerfunc.checkHealthResponse:
    properties:
      hostname:
        type: string
      status:
        type: string
    type: object
  types.Column:
    properties:
      exp:
        description: expressions, which default to = when the value is null, have
          =, ! =, >, >=, <, <=, like
        type: string
      logic:
        description: logical type, defaults to and when value is null, only &(and),
          ||(or)
        type: string
      name:
        description: column name
        type: string
      value:
        description: column value
    type: object
  types.CreateUserExampleRequest:
    properties:
      age:
        description: age
        type: integer
      avatar:
        description: avatar
        minLength: 5
        type: string
      email:
        description: email
        type: string
      gender:
        description: gender, 1:Male, 2:Female, other values:unknown
        maximum: 2
        minimum: 0
        type: integer
      name:
        description: username
        minLength: 2
        type: string
      password:
        description: password
        type: string
      phone:
        description: phone number, e164 means <+ country code> <cell phone number>.
        type: string
    type: object
  types.GetUserExamplesByIDsRequest:
    properties:
      ids:
        description: id list
        items:
          type: integer
        minItems: 1
        type: array
    type: object
  types.Params:
    properties:
      columns:
        description: query conditions
        items:
          $ref: '#/definitions/types.Column'
        type: array
      page:
        description: page number, starting from page 0
        minimum: 0
        type: integer
      size:
        description: lines per page
        type: integer
      sort:
        description: sorted fields, multi-column sorting separated by commas
        type: string
    type: object
  types.Result:
    properties:
      code:
        description: return code
        type: integer
      data:
        description: return data
      msg:
        description: return information description
        type: string
    type: object
  types.UpdateUserExampleByIDRequest:
    properties:
      age:
        description: age
        type: integer
      avatar:
        description: avatar
        type: string
      email:
        description: email
        type: string
      gender:
        description: gender, 1:Male, 2:Female, other values:unknown
        type: integer
      id:
        description: id
        type: integer
      name:
        description: username
        type: string
      password:
        description: password
        type: string
      phone:
        description: phone number
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: http server api docs
  title: serverNameExample api docs
  version: v0.0.0
paths:
  /api/v1/userExample:
    post:
      consumes:
      - application/json
      description: submit information to create userExample
      parameters:
      - description: userExample information
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserExampleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Result'
      summary: create userExample
      tags:
      - userExample
  /api/v1/userExample/{id}:
    delete:
      consumes:
      - application/json
      description: delete userExample by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Result'
      summary: delete userExample
      tags:
      - userExample
    get:
      consumes:
      - application/json
      description: get userExample details by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Result'
      summary: get userExample details
      tags:
      - userExample
    put:
      consumes:
      - application/json
      description: update userExample information based on id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: userExample information
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserExampleByIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Result'
      summary: update userExample information
      tags:
      - userExample
  /api/v1/userExamples:
    post:
      consumes:
      - application/json
      description: get a list of userExamples using a post request
      parameters:
      - description: query parameters
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/types.Params'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Result'
      summary: get a list of userExample
      tags:
      - userExample
  /api/v1/userExamples/ids:
    post:
      consumes:
      - application/json
      description: get a list of userExample based on multiple ids using a post request
      parameters:
      - description: id array
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/types.GetUserExamplesByIDsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Result'
      summary: get multiple records based on multiple ids
      tags:
      - userExample
  /health:
    get:
      consumes:
      - application/json
      description: check health
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlerfunc.checkHealthResponse'
      summary: check health
      tags:
      - system
  /ping:
    get:
      consumes:
      - application/json
      description: ping
      produces:
      - application/json
      responses: {}
      summary: ping
      tags:
      - system
schemes:
- http
- https
swagger: "2.0"
